#include <GL/glut.h>
#include <math.h>
#include <iostream>

using namespace std;

float square[4][2] = {
    {100, 100},
    {200, 100},
    {200, 200},
    {100, 200}
};

float angle = 45; // rotation angle
float sx = 1.5, sy = 1.5; // scaling factors
float rx = 150, ry = 150; // arbitrary rotation/scaling point

void drawPolygon() {
    glColor3f(0, 0, 1); // Blue
    glBegin(GL_POLYGON);
    for (int i = 0; i < 4; i++)
        glVertex2fv(square[i]);
    glEnd();
    glFlush();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawPolygon();
}

void rotateAboutPoint(float x, float y) {
    float rad = angle * M_PI / 180;
    for (int i = 0; i < 4; i++) {
        float tx = square[i][0] - x;
        float ty = square[i][1] - y;

        float xr = tx * cos(rad) - ty * sin(rad);
        float yr = tx * sin(rad) + ty * cos(rad);

        square[i][0] = xr + x;
        square[i][1] = yr + y;
    }
}

void scaleAboutPoint(float x, float y) {
    for (int i = 0; i < 4; i++) {
        square[i][0] = x + (square[i][0] - x) * sx;
        square[i][1] = y + (square[i][1] - y) * sy;
    }
}

void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case 'r': // rotate
            rotateAboutPoint(rx, ry);
            break;
        case 's': // scale
            scaleAboutPoint(rx, ry);
            break;
        case 'q': // quit
            exit(0);
    }
    glutPostRedisplay();
}

void init() {
    glClearColor(1, 1, 1, 1);
    gluOrtho2D(0, 640, 0, 480);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitWindowSize(640, 480);
    glutInitWindowPosition(200, 200);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutCreateWindow("2D Scaling and Rotation");

    init();
    glutDisplayFunc(display);
    glutKeyboardFunc(keyboard);
    glutMainLoop();
    return 0;
}
