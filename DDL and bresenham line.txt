#include <GL/glut.h>
#include <iostream>
#include <cmath>

using namespace std;

int x1, y1, x2, y2;
bool firstClick = true;
bool readyToDraw = false;

// Set manually: 1 = DDA, 2 = Bresenham
int algorithm = 1;

// Set manually: 1 = Solid, 2 = Dotted, 3 = Dashed
int lineStyle = 1;

void plot(int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

void drawDDALine(int x1, int y1, int x2, int y2) {
    int dx = x2 - x1;
    int dy = y2 - y1;
    int steps = max(abs(dx), abs(dy));
    float x_inc = dx / (float)steps;
    float y_inc = dy / (float)steps;

    float x = x1, y = y1;

    for (int i = 0; i <= steps; i++) {
        if (lineStyle == 1 || (lineStyle == 2 && i % 2 == 0) || (lineStyle == 3 && (i / 5) % 2 == 0))
            plot(round(x), round(y));
        x += x_inc;
        y += y_inc;
    }
}

void drawBresenhamLine(int x1, int y1, int x2, int y2) {
    int dx = abs(x2 - x1), dy = abs(y2 - y1);
    int sx = x2 > x1 ? 1 : -1;
    int sy = y2 > y1 ? 1 : -1;
    bool steep = dy > dx;

    if (steep) {
        swap(dx, dy);
    }

    int p = 2 * dy - dx;
    int x = x1, y = y1;

    for (int i = 0; i <= dx; i++) {
        if (lineStyle == 1 || (lineStyle == 2 && i % 2 == 0) || (lineStyle == 3 && (i / 5) % 2 == 0))
            plot(x, y);

        if (p >= 0) {
            if (steep)
                x += sx;
            else
                y += sy;
            p -= 2 * dx;
        }

        if (steep)
            y += sy;
        else
            x += sx;

        p += 2 * dy;
    }
}

void drawAxes() {
    glColor3f(1, 1, 1);
    glBegin(GL_LINES);
    glVertex2i(-500, 0); glVertex2i(500, 0);  // X-axis
    glVertex2i(0, -500); glVertex2i(0, 500);  // Y-axis
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawAxes();

    if (readyToDraw) {
        glColor3f(1, 1, 0);  // Yellow line
        if (algorithm == 1)
            drawDDALine(x1, y1, x2, y2);
        else if (algorithm == 2)
            drawBresenhamLine(x1, y1, x2, y2);
    }

    glFlush();
}

void mouse(int button, int state, int mx, int my) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        int winY = glutGet(GLUT_WINDOW_HEIGHT);
        int x = mx - 250;
        int y = 250 - my;

        if (firstClick) {
            x1 = x;
            y1 = y;
            firstClick = false;
        } else {
            x2 = x;
            y2 = y;
            firstClick = true;
            readyToDraw = true;
            glutPostRedisplay();  // Trigger re-render
        }
    }
}

void init() {
    glClearColor(0, 0, 0, 1);
    gluOrtho2D(-250, 250, -250, 250);  // Cartesian coordinates
    glPointSize(2.0);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitWindowSize(500, 500);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutCreateWindow("Line Drawing - DDA & Bresenham");

    init();
    glutDisplayFunc(display);
    glutMouseFunc(mouse);

    glutMainLoop();
    return 0;
}




































############## bresenham circle 



#include <GL/glut.h>
#include <iostream>
using namespace std;

int r;

void E_way(int x, int y) {
    glBegin(GL_POINTS);
        glVertex2i(x + 320, y + 240);
        glVertex2i(y + 320, x + 240);
        glVertex2i(y + 320, -x + 240);
        glVertex2i(x + 320, -y + 240);
        glVertex2i(-x + 320, -y + 240);
        glVertex2i(-y + 320, -x + 240);
        glVertex2i(-y + 320, x + 240);
        glVertex2i(-x + 320, y + 240);
    glEnd();
    glFlush();
}

void B_circle() {
    int x = 0, y = r;
    int d = 3 - 2 * r;

    while (x <= y) {
        E_way(x, y);
        if (d < 0)
            d = d + 4 * x + 6;
        else {
            d = d + 4 * (x - y) + 10;
            y--;
        }
        x++;
    }
}

void init() {
    glClearColor(1, 1, 1, 0);
    glColor3f(1, 0, 0);
    gluOrtho2D(0, 640, 0, 480);
    glClear(GL_COLOR_BUFFER_BIT);
}

int main(int argc, char** argv) {
    cout << "\nEnter Radius: ";
    cin >> r;

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(640, 480);
    glutCreateWindow("Bresenham Circle Drawing");

    init();
    glutDisplayFunc(B_circle);
    glutMainLoop();
    return 0;
}

