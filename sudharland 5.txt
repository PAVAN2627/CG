#include <GL/glut.h>
#include <iostream>

using namespace std;

const int winWidth = 640, winHeight = 480;
int fillColor[3] = {0, 1, 0}; // green fill
int borderColor[3] = {1, 0, 0}; // red border

void setPixel(int x, int y, float r, float g, float b) {
    glColor3f(r, g, b);
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
    glFlush();
}

void getPixel(int x, int y, float* color) {
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, color);
}

bool isSameColor(float* a, float* b) {
    return (int)(a[0]*10) == (int)(b[0]*10) &&
           (int)(a[1]*10) == (int)(b[1]*10) &&
           (int)(a[2]*10) == (int)(b[2]*10);
}

void floodFill(int x, int y, float* oldColor, float* newColor) {
    float color[3];
    getPixel(x, y, color);

    if (isSameColor(color, oldColor)) {
        setPixel(x, y, newColor[0], newColor[1], newColor[2]);

        floodFill(x + 1, y, oldColor, newColor);
        floodFill(x - 1, y, oldColor, newColor);
        floodFill(x, y + 1, oldColor, newColor);
        floodFill(x, y - 1, oldColor, newColor);
    }
}

void drawPolygon() {
    glColor3f(borderColor[0], borderColor[1], borderColor[2]);
    glBegin(GL_POLYGON);
    glVertex2i(150, 150);
    glVertex2i(300, 150);
    glVertex2i(300, 300);
    glVertex2i(150, 300);
    glEnd();
    glFlush();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawPolygon();
}

void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        y = winHeight - y;
        float oldColor[3];
        float newColor[3] = { fillColor[0], fillColor[1], fillColor[2] };

        getPixel(x, y, oldColor);
        if (!isSameColor(oldColor, newColor)) {
            floodFill(x, y, oldColor, newColor);
        }
    }
}

void menu(int option) {
    if (option == 1) {
        glutPostRedisplay();
    } else if (option == 2) {
        exit(0);
    }
}

void keyboard(unsigned char key, int x, int y) {
    if (key == 'f' || key == 'F') {
        // Simulate a seed fill at center
        int sx = (150 + 300) / 2;
        int sy = (150 + 300) / 2;
        float oldColor[3];
        float newColor[3] = { fillColor[0], fillColor[1], fillColor[2] };
        getPixel(sx, sy, oldColor);
        if (!isSameColor(oldColor, newColor)) {
            floodFill(sx, sy, oldColor, newColor);
        }
    }
}

void init() {
    glClearColor(1, 1, 1, 1); // white background
    gluOrtho2D(0, winWidth, 0, winHeight);
    glPointSize(1.0);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitWindowSize(winWidth, winHeight);
    glutInitWindowPosition(100, 100);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutCreateWindow("Flood Fill with Mouse and Menu");

    init();
    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutKeyboardFunc(keyboard);

    glutCreateMenu(menu);
    glutAddMenuEntry("Redraw Polygon", 1);
    glutAddMenuEntry("Exit", 2);
    glutAttachMenu(GLUT_RIGHT_BUTTON);

    glutMainLoop();
    return 0;
}
